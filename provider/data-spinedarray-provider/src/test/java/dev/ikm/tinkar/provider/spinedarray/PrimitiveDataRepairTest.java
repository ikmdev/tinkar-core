/*
 * Copyright © 2015 Integrated Knowledge Management (support@ikm.dev)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.ikm.tinkar.provider.spinedarray;

import org.junit.jupiter.api.Test;

class PrimitiveDataRepairTest {
    /**
     * Merge these semantic records with different nids and UUIDs into a single semantic record containing all UUIDs,
     * versions, and a single nid.
     *
     SemanticRecord{<-2140892381> [b82fdcf8-39ee-5105-a779-7dfa1a300000], of pattern: «Stated definition pattern <-2147483594> [e813eb92-7d07-5035-8d43-e81249f5b36e]», rc: «Model concept <-2142333842> [7bbd4210-381c-11e7-9598-0800200c9a66]»,
     v: ≤s:Active t:2020-12-01 20:39:08 a:User m:Primordial module p:Primordial path
     Field 1: ‹
     EL++ Stated terminological axioms: DiTreeEntity{
     [0]➞[3] Definition root
     [3]➞[2] Necessary set
     [2]➞[1] And
     [1] Concept reference: SOLOR concept
     }› DiTreeEntity
     ≥}

     -2140892381 byte[] = [0, 0, 0, 2, 0, 0, 0, 35, 1, 3, -128, 100, -109, 35, -72, 47, -36, -8, 57, -18, 81, 5, -89,
                           121, 125, -6, 26, 48, 0, 0, 0, -128, 78, -108, 110, -128, 0, 0, 54, 0, 0, 0, 1, 0, 0, 0,
                          -49, 6, -128, 97, 100, 80, 0, 0, 0, 1, 19, 0, 0, 0, 4, 55, 93, -46, -63, 30, -108, 80, -108,
                          -121, -117, -39, -62, -81, -95, 48, -91, 0, 0, 0, 0, -128, 80, 103, 8, 0, 0, 0, 0, -46, -29,
                           56, 93, 73, 11, 95, 90, -89, -73, 115, -84, -66, -6, -68, -17, 0, 0, 0, 1, -128, 80, 103,
                          -22, 0, 0, 0, 1, -128, 80, 103, -22, 16, -128, 78, -108, 38, 56, -55, -120, -16, 92, -30, 84,
                           7, -121, -4, 61, 77, -112, 114, 98, -111, 0, 0, 0, 2, -128, 79, -86, 2, 0, 0, 0, 0, -51, 25,
                         -44, 123, -15, 126, 91, 84, -83, 43, -50, 113, 102, -89, 86, -37, 0, 0, 0, 3, -128, 79, -88,
                         -54, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0,
                           0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0,
                           0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0]


     SemanticRecord{<-2140594810> [730009ab-ba18-5a54-a7f9-689e1413a495], of pattern: «Stated definition pattern <-2147483594> [e813eb92-7d07-5035-8d43-e81249f5b36e]», rc: «Model concept <-2142333842> [7bbd4210-381c-11e7-9598-0800200c9a66]»,
     v: ≤s:Active t:2020-10-22 09:31:04 a:User m:Primordial module p:Primordial path
     Field 1: ‹
     EL++ Stated terminological axioms: DiTreeEntity{
     [0]➞[3] Definition root
     [3]➞[2] Necessary set
     [2]➞[1] And
     [1] Concept reference: SOLOR concept
     }› DiTreeEntity
     ≥}

     -2140594810 byte[] = [0, 0, 0, 2, 0, 0, 0, 35, 1, 3, -128, 105, 29, -122, 115, 0, 9, -85, -70, 24, 90, 84, -89, -7,
                         104, -98, 20, 19, -92, -107, 0, -128, 78, -108, 110, -128, 0, 0, 54, 0, 0, 0, 1, 0, 0, 0, -49,
                           6, -128, 0, 0, 21, 0, 0, 0, 1, 19, 0, 0, 0, 4, 55, 93, -46, -63, 30, -108, 80, -108, -121,
                        -117, -39, -62, -81, -95, 48, -91, 0, 0, 0, 0, -128, 80, 103, 8, 0, 0, 0, 0, -46, -29, 56, 93,
                          73, 11, 95, 90, -89, -73, 115, -84, -66, -6, -68, -17, 0, 0, 0, 1, -128, 80, 103, -22, 0, 0,
                           0, 1, -128, 80, 103, -22, 16, -128, 78, -108, 38, 56, -55, -120, -16, 92, -30, 84, 7, -121,
                          -4, 61, 77, -112, 114, 98, -111, 0, 0, 0, 2, -128, 79, -86, 2, 0, 0, 0, 0, -51, 25, -44, 123,
                         -15, 126, 91, 84, -83, 43, -50, 113, 102, -89, 86, -37, 0, 0, 0, 3, -128, 79, -88, -54, 0, 0,
                           0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0,
                           0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3,
                           0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0]
     */
    @Test
    void merge() {
        byte[] bytes1 = {0, 0, 0, 2, 0, 0, 0, 35, 1, 3, -128, 100, -109, 35, -72, 47, -36, -8, 57, -18, 81, 5, -89,
                121, 125, -6, 26, 48, 0, 0, 0, -128, 78, -108, 110, -128, 0, 0, 54, 0, 0, 0, 1, 0, 0, 0,
                -49, 6, -128, 97, 100, 80, 0, 0, 0, 1, 19, 0, 0, 0, 4, 55, 93, -46, -63, 30, -108, 80, -108,
                -121, -117, -39, -62, -81, -95, 48, -91, 0, 0, 0, 0, -128, 80, 103, 8, 0, 0, 0, 0, -46, -29,
                56, 93, 73, 11, 95, 90, -89, -73, 115, -84, -66, -6, -68, -17, 0, 0, 0, 1, -128, 80, 103,
                -22, 0, 0, 0, 1, -128, 80, 103, -22, 16, -128, 78, -108, 38, 56, -55, -120, -16, 92, -30, 84,
                7, -121, -4, 61, 77, -112, 114, 98, -111, 0, 0, 0, 2, -128, 79, -86, 2, 0, 0, 0, 0, -51, 25,
                -44, 123, -15, 126, 91, 84, -83, 43, -50, 113, 102, -89, 86, -37, 0, 0, 0, 3, -128, 79, -88,
                -54, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0,
                0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0,
                0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0};

        byte[] bytes2 = {0, 0, 0, 2, 0, 0, 0, 35, 1, 3, -128, 105, 29, -122, 115, 0, 9, -85, -70, 24, 90, 84, -89, -7,
                104, -98, 20, 19, -92, -107, 0, -128, 78, -108, 110, -128, 0, 0, 54, 0, 0, 0, 1, 0, 0, 0, -49,
                6, -128, 0, 0, 21, 0, 0, 0, 1, 19, 0, 0, 0, 4, 55, 93, -46, -63, 30, -108, 80, -108, -121,
                -117, -39, -62, -81, -95, 48, -91, 0, 0, 0, 0, -128, 80, 103, 8, 0, 0, 0, 0, -46, -29, 56, 93,
                73, 11, 95, 90, -89, -73, 115, -84, -66, -6, -68, -17, 0, 0, 0, 1, -128, 80, 103, -22, 0, 0,
                0, 1, -128, 80, 103, -22, 16, -128, 78, -108, 38, 56, -55, -120, -16, 92, -30, 84, 7, -121,
                -4, 61, 77, -112, 114, 98, -111, 0, 0, 0, 2, -128, 79, -86, 2, 0, 0, 0, 0, -51, 25, -44, 123,
                -15, 126, 91, 84, -83, 43, -50, 113, 102, -89, 86, -37, 0, 0, 0, 3, -128, 79, -88, -54, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0,
                0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3,
                0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0};

        //byte[] mergedBytes = PrimitiveData.get().merge(bytes1, bytes2);

    }
}